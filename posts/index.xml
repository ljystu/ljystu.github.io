<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - My New Hugo Site</title>
        <link>https://github.com/ljystu/ljystu.github.io/posts/</link>
        <description>All Posts | My New Hugo Site</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>ljystu@gmail.com (Jingyu Li)</managingEditor>
            <webMaster>ljystu@gmail.com (Jingyu Li)</webMaster><lastBuildDate>Tue, 21 Dec 2021 15:15:45 &#43;0100</lastBuildDate><atom:link href="https://github.com/ljystu/ljystu.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Elasticsearch</title>
    <link>https://github.com/ljystu/ljystu.github.io/elasticsearch/</link>
    <pubDate>Wed, 06 Jul 2022 10:36:32 &#43;0100</pubDate><author>
        <name>Jingyu Li</name>
    </author><guid>https://github.com/ljystu/ljystu.github.io/elasticsearch/</guid>
    <description><![CDATA[A powerful search engine for large scale data search. Also benefit for log analysis and monitoring. Elasticsearch: store, compute, search data Inverted Index inverted index (also referred to as a postings list, postings file, or inverted file) is a database index storing a mapping from content, such as words or numbers, to its locations in a table, or in a document or a set of documents (named in contrast to]]></description>
</item><item>
    <title>RabbitMQ</title>
    <link>https://github.com/ljystu/ljystu.github.io/rabbitmq/</link>
    <pubDate>Sat, 18 Jun 2022 10:36:32 &#43;0100</pubDate><author>
        <name>Jingyu Li</name>
    </author><guid>https://github.com/ljystu/ljystu.github.io/rabbitmq/</guid>
    <description><![CDATA[Decoupling Event-driven design better performance Problems with Synchronous communication(Feign): 1.Coupling 2.can not handle huge amount of requests in a short time(high concurrency). 3.Waste of resources during waiting 4.Cascade failure: service failed, the cluster fails cascadingly Asynchronous(Event driven design): Use Broker to control events. Service publish events and the others subscribed to the broker waiting for events. Better performance/No cascade failures Advantages of asynchronous communication: Low coupling Improve throughput Fault isolation]]></description>
</item><item>
    <title>Redis distributed lock</title>
    <link>https://github.com/ljystu/ljystu.github.io/redis-distributed-lock/</link>
    <pubDate>Wed, 18 May 2022 10:36:32 &#43;0100</pubDate><author>
        <name>Jingyu Li</name>
    </author><guid>https://github.com/ljystu/ljystu.github.io/redis-distributed-lock/</guid>
    <description><![CDATA[Distributed lock Under highly concurrent environment, the distributed lock is used to ensure consistency in the database. Here&rsquo;s an example of this.
Using simple lock:
1 2 3 4 5 6 7 8 9  stringRedisTemplate.opsForValue().setIfAbsent(&#34;lockKey&#34;, &#34;ljy&#34;); // This is the simplest realization of lock in redis // But this lock will trigger deadlock when the service is down // adding delete won&#39;t help stringTemplate.delete(&#34;lockKey&#34;); // setting expiration time have problem as well stringRedisTemplate.]]></description>
</item><item>
    <title>Best Time to Buy and Sell Stock</title>
    <link>https://github.com/ljystu/ljystu.github.io/best-time-to-buy-and-sell-stock/</link>
    <pubDate>Tue, 17 May 2022 10:36:32 &#43;0100</pubDate><author>
        <name>Jingyu Li</name>
    </author><guid>https://github.com/ljystu/ljystu.github.io/best-time-to-buy-and-sell-stock/</guid>
    <description><![CDATA[Redis Redis with pyrhon Simple example of how to use redis as Cache in python:
If we want to store some info in cache(logo, name), we first can convert them into JSON format and assign a key, and store the info in cache.
1 2 3  logo = get_logo() #maybe get logo from api json.dumps(logo) #convert to JSON logo_key = f&#34;{symbol}_logo&#34; #naming convention   When we need to use the info, we can first get it from the cache.]]></description>
</item><item>
    <title>Redis</title>
    <link>https://github.com/ljystu/ljystu.github.io/redis/</link>
    <pubDate>Mon, 16 May 2022 10:36:32 &#43;0100</pubDate><author>
        <name>Jingyu Li</name>
    </author><guid>https://github.com/ljystu/ljystu.github.io/redis/</guid>
    <description><![CDATA[Redis Redis with python Simple example of how to use redis as Cache in python:
If we want to store some info in cache(logo, name), we first can convert them into JSON format and assign a key, and store the info in cache.
1 2 3  logo = get_logo() #maybe get logo from api json.dumps(logo) #convert to JSON logo_key = f&#34;{symbol}_logo&#34; #naming convention   When we need to use the info, we can first get it from the cache.]]></description>
</item><item>
    <title>Restore IP address</title>
    <link>https://github.com/ljystu/ljystu.github.io/restore-ip-address/</link>
    <pubDate>Sat, 07 May 2022 10:36:32 &#43;0100</pubDate><author>
        <name>Jingyu Li</name>
    </author><guid>https://github.com/ljystu/ljystu.github.io/restore-ip-address/</guid>
    <description><![CDATA[Leetcode 93 https://leetcode-cn.com/problems/restore-ip-addresses/ A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros. For example, &ldquo;0.1.2.201&rdquo; and &ldquo;192.168.1.1&rdquo; are valid IP addresses, but &ldquo;0.011.255.245&rdquo;, &ldquo;192.168.1.312&rdquo; and &ldquo;192.168@1.1&rdquo; are invalid IP addresses. Given a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You]]></description>
</item><item>
    <title>backtracking summary</title>
    <link>https://github.com/ljystu/ljystu.github.io/%E5%9B%9E%E6%BA%AF%E6%80%BB%E7%BB%93/</link>
    <pubDate>Fri, 06 May 2022 10:36:32 &#43;0100</pubDate><author>
        <name>Jingyu Li</name>
    </author><guid>https://github.com/ljystu/ljystu.github.io/%E5%9B%9E%E6%BA%AF%E6%80%BB%E7%BB%93/</guid>
    <description><![CDATA[回溯法，一般可以解决如下几种问题： 组合问题：N个数里面按一定规则找出k个数的集合 切割问题：一个字符串按一定规则有几种切割方式 子集问题：一个N]]></description>
</item><item>
    <title>Increasing Subsequence</title>
    <link>https://github.com/ljystu/ljystu.github.io/increasing-subsequences/</link>
    <pubDate>Fri, 06 May 2022 10:36:32 &#43;0100</pubDate><author>
        <name>Jingyu Li</name>
    </author><guid>https://github.com/ljystu/ljystu.github.io/increasing-subsequences/</guid>
    <description><![CDATA[Leetcode 491 https://leetcode-cn.com/problems/increasing-subsequences/ Given an integer array nums, return all the different possible increasing subsequences of the given array with at least two elements. You may return the answer in any order. The given array may contain duplicates, and two equal integers should also be considered a special case of increasing sequence. Example 1: Input: nums = [4,6,7,7] Output: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]] Example 2: Input: nums = [4,4,3,2,1] Output: [[4,4]] Constraints: 1]]></description>
</item><item>
    <title>Letter combination of a phone number</title>
    <link>https://github.com/ljystu/ljystu.github.io/letter-combinations-of-a-phone-number/</link>
    <pubDate>Fri, 06 May 2022 10:36:32 &#43;0100</pubDate><author>
        <name>Jingyu Li</name>
    </author><guid>https://github.com/ljystu/ljystu.github.io/letter-combinations-of-a-phone-number/</guid>
    <description><![CDATA[Leetcode 17 https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/
 Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order. A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.
Example 1:
Input: digits = &ldquo;23&rdquo; Output: [&ldquo;ad&rdquo;,&ldquo;ae&rdquo;,&ldquo;af&rdquo;,&ldquo;bd&rdquo;,&ldquo;be&rdquo;,&ldquo;bf&rdquo;,&ldquo;cd&rdquo;,&ldquo;ce&rdquo;,&ldquo;cf&rdquo;] Example 2:
Input: digits = &quot;&quot; Output: [] Example 3:]]></description>
</item><item>
    <title>Permutations II</title>
    <link>https://github.com/ljystu/ljystu.github.io/permutations-ii/</link>
    <pubDate>Fri, 06 May 2022 10:36:32 &#43;0100</pubDate><author>
        <name>Jingyu Li</name>
    </author><guid>https://github.com/ljystu/ljystu.github.io/permutations-ii/</guid>
    <description><![CDATA[Leetcode 47 https://leetcode-cn.com/problems/permutations-ii/ Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order. Example 1: Input: nums = [1,1,2] Output: [[1,1,2], [1,2,1], [2,1,1]] Example 2: Input: nums = [1,2,3] Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] Constraints: 1 &lt;= nums.length &lt;= 8 -10 &lt;= nums[i] &lt;= 10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20]]></description>
</item></channel>
</rss>
